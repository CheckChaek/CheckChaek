<<<<<<< HEAD:project/server/business/src/main/resources/application-prod.yml
# 프로젝트 서버 URL
server.url: https://j9a606.p.ssafy.io

# 서버 설정
server:
  port: 8082
  servlet:
    context-path: /business
=======
server:
  port: 8081
  servlet:
>>>>>>> cd5e4feb64111f9252e36f68a97a905549467398:project/server/auth/src/main/resources/application-prod.yml
    encoding:
      charset: UTF-8
      enabled: true
      force: true

<<<<<<< HEAD:project/server/business/src/main/resources/application-prod.yml
# S3 설정
cloud:
  aws:
    credentials:
      accessKey: AKIATAEGQITM4DIXMJIL
      secretKey: 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
    s3:
      bucket: imagebucket606
    region:
      static: ap-northeast-2
    stack:
      auto: false


# DB 설정
spring:
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver  # Database를 MariaDB로 사용하겠다.
    url: jdbc:mariadb://j9a606.p.ssafy.io/checkchaeck  # MariaDB로 접속 정보
    username: root  # MariaDB로 접속 시 입력할 username 정보 (원하는 것으로 입력)
    password: ash0906! # MariaDB로 접속 시 입력할 password 정보 (원하는 것으로 입력)

  jpa:
    hibernate:
      ddl-auto: update
=======
spring:
#   H2 Setting Info (H2 Console에 접속하기 위한 설정정보 입력)
  # h2:
  #   console:
  #     enabled: true  # H2 Console을 사용할지 여부 (H2 Console은 H2 Database를 UI로 제공해주는 기능)
  #     path: /h2-console  # H2 Console의 Path
  #     settings:
  #       web-allow-others: true
  # # Database Setting Info (Database를 H2로 사용하기 위해 H2연결 정보 입력)
  # datasource:
  #   driver-class-name: org.h2.Driver  # Database를 H2로 사용하겠다.
  #   url: jdbc:h2:~/test  # H2 접속 정보
  #   username: sa  # H2 접속 시 입력할 username 정보 (원하는 것으로 입력)
  #   password: 1234 # H2 접속 시 입력할 password 정보 (원하는 것으로 입력)

  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://j9a606.p.ssafy.io:3306/checkchaeck?characterEncoding=UTF-8&serverTimezone=UTC&allowPublicKeyRetrieval=true&useSSL=false
    username: root
    password: ash0906!

  jpa:
    hibernate:
      ddl-auto: create
>>>>>>> cd5e4feb64111f9252e36f68a97a905549467398:project/server/auth/src/main/resources/application-prod.yml
    properties:
      hibernate:
        format_sql: true
        jdbc:
          time_zone: Asia/Seoul
        default_batch_fetch_size: 1000
    show-sql: true

<<<<<<< HEAD:project/server/business/src/main/resources/application-prod.yml
    servlet:
      multipart:
        max-file-size: 100MB
        max-request-size: 100MB

# Swagger 설정
springdoc:
  packages-to-scan: com.cc.domain.business.controllers
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  swagger-ui:
    path: /
    disable-swagger-default-url: true
    display-request-duration: true
    operations-sorter: alpha
=======
  security:
    oauth2:
      redirectUrl: https://j9a606.p.ssafy.io/login/redirect
      redirectUrl_local: https://j9a606.p.ssafy.io/login/redirect
      # redirectUrl_local: http://localhost:3000/login/redirect
      client:
        registration:
          kakao:
            client-id: c5827bdd1888edc3b7a7c64483fb1159
            client-secret: o9cosxxIlRLYoDbKbms8v02pOJBDyO7t
            redirect-uri: http://j9a606.p.ssafy.io:8081/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: Kakao
            scope:
              - profile_nickname
          #              - profile_image
          google:
            client-id: 195520493714-ichavs28t68gacsli4hal2t8lsl7s1q4.apps.googleusercontent.com
            client-secret: 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
            redirect-uri: http://j9a606.p.ssafy.io:8081/login/oauth2/code/google
            scope:
              - profile
              - email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  data:
    redis:
      port: 6379
      host: j9a606.p.ssafy.io


jwt:
  secretKey: checkchaeck

  access:
    expiration: 10800000
    # expiration: 3600000 # 1시간(60분) (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h))
    header: Authorization

  refresh:
    expiration: 1209600000 #  (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h) * 24L(h -> 하루) * 14(2주))
    header: Authorization_refresh

>>>>>>> cd5e4feb64111f9252e36f68a97a905549467398:project/server/auth/src/main/resources/application-prod.yml
